import "engine_sim.mr"

units units()
constants constants()
impulse_response_library ir_lib()

label cycle(2 * 360 * units.deg)

private node wires {
    output wire1: ignition_wire();
    output wire2: ignition_wire();
    output wire3: ignition_wire();
    output wire4: ignition_wire();
    output wire5: ignition_wire();
    output wire6: ignition_wire();
}

private node i_distributor {
    input wires;
    input timing_curve;
    input rev_limit: 5500 * units.rpm;
    input limiter_duration: 0.05;
    alias output __out:
        ignition_module(timing_curve: timing_curve, rev_limit: rev_limit, limiter_duration: limiter_duration)
            .connect_wire(wires.wire1, (0.0 / 6.0) * cycle)
            .connect_wire(wires.wire2, (0.75 / 6.0) * cycle)
            .connect_wire(wires.wire3, (1.75 / 6.0) * cycle)
            .connect_wire(wires.wire4, (2.75 / 6.0) * cycle)
            .connect_wire(wires.wire5, (3.75 / 6.0) * cycle)
            .connect_wire(wires.wire6, (4.75 / 6.0) * cycle);
}

public node i_camshaft_builder {
    input lobe_profile: comp_cams_magnum_11_450_8_lobe_profile();
    input intake_lobe_profile: lobe_profile;
    input exhaust_lobe_profile: lobe_profile;
    input lobe_separation: 110.0 * units.deg;
    input intake_lobe_center: lobe_separation;
    input exhaust_lobe_center: lobe_separation;
    input advance: 0.0 * units.deg;
    input base_radius: 0.75 * units.inch;

    output intake_cam: _intake_cam;
    output exhaust_cam: _exhaust_cam;

    camshaft_parameters params(
        advance: advance,
        base_radius: base_radius
    )

    camshaft _intake_cam(params, lobe_profile: intake_lobe_profile)
    camshaft _exhaust_cam(params, lobe_profile: exhaust_lobe_profile)

    label rot(2 * (360 / 6.0) * units.deg)
    label rot360(360 * units.deg)

    _exhaust_cam
        .add_lobe(rot360 - exhaust_lobe_center)
        .add_lobe((rot360 - exhaust_lobe_center) + 1 * rot)
        .add_lobe((rot360 - exhaust_lobe_center) + 2 * rot)
        .add_lobe((rot360 - exhaust_lobe_center) + 3 * rot)
        .add_lobe((rot360 - exhaust_lobe_center) + 4 * rot)
        .add_lobe((rot360 - exhaust_lobe_center) + 5 * rot)

    _intake_cam
        .add_lobe(rot360 + intake_lobe_center)
        .add_lobe(rot360 + intake_lobe_center + 1 * rot)
        .add_lobe(rot360 + intake_lobe_center + 2 * rot)
        .add_lobe(rot360 + intake_lobe_center + 3 * rot)
        .add_lobe(rot360 + intake_lobe_center + 4 * rot)
        .add_lobe(rot360 + intake_lobe_center + 5 * rot)
}

private node i_head {
    input intake_camshaft;
    input exhaust_camshaft;
    input chamber_volume: 50 * units.cc;
    input intake_runner_volume: 149.6 * units.cc;
    input intake_runner_cross_section_area: 1.9 * units.inch * 1.9 * units.inch;
    input exhaust_runner_volume: 50.0 * units.cc;
    input exhaust_runner_cross_section_area: 1.25 * units.inch * 1.25 * units.inch;

    input flow_attenuation: 1.0;
    input lift_scale: 1.0;
    input flip_display: false;
    alias output __out: head;

    function intake_flow(50 * units.thou)
    intake_flow
        .add_flow_sample(0 * lift_scale, 0 * flow_attenuation)
        .add_flow_sample(50 * lift_scale, 58 * flow_attenuation)
        .add_flow_sample(100 * lift_scale, 103 * flow_attenuation)
        .add_flow_sample(150 * lift_scale, 156 * flow_attenuation)
        .add_flow_sample(200 * lift_scale, 214 * flow_attenuation)
        .add_flow_sample(250 * lift_scale, 249 * flow_attenuation)
        .add_flow_sample(300 * lift_scale, 268 * flow_attenuation)
        .add_flow_sample(350 * lift_scale, 280 * flow_attenuation)
        .add_flow_sample(400 * lift_scale, 280 * flow_attenuation)
        .add_flow_sample(450 * lift_scale, 281 * flow_attenuation)

    function exhaust_flow(50 * units.thou)
    exhaust_flow
        .add_flow_sample(0 * lift_scale, 0 * flow_attenuation)
        .add_flow_sample(50 * lift_scale, 37 * flow_attenuation)
        .add_flow_sample(100 * lift_scale, 72 * flow_attenuation)
        .add_flow_sample(150 * lift_scale, 113 * flow_attenuation)
        .add_flow_sample(200 * lift_scale, 160 * flow_attenuation)
        .add_flow_sample(250 * lift_scale, 196 * flow_attenuation)
        .add_flow_sample(300 * lift_scale, 222 * flow_attenuation)
        .add_flow_sample(350 * lift_scale, 235 * flow_attenuation)
        .add_flow_sample(400 * lift_scale, 245 * flow_attenuation)
        .add_flow_sample(450 * lift_scale, 246 * flow_attenuation)

    generic_cylinder_head head(
        chamber_volume: chamber_volume,
        intake_runner_volume: intake_runner_volume,
        intake_runner_cross_section_area: intake_runner_cross_section_area,
        exhaust_runner_volume: exhaust_runner_volume,
        exhaust_runner_cross_section_area: exhaust_runner_cross_section_area,

        intake_port_flow: intake_flow,
        exhaust_port_flow: exhaust_flow,
        valvetrain: standard_valvetrain(
            intake_camshaft: intake_camshaft,
            exhaust_camshaft: exhaust_camshaft
        ),
        flip_display: flip_display
    )
}

public node kohler_ch750 {
    alias output __out: engine;

    engine engine(
        name: "Modded Kohler CH750",
        starter_torque: 150 * units.lb_ft,
        starter_speed: 6200 * units.rpm,
        redline: 18400 * units.rpm,
        fuel: fuel(
            molecular_mass: 25200 * units.g,
            energy_density: 25.5 * units.kJ / units.g,
            density: 0.85 * units.kg / units.L,
            molecular_afr: 29.0 / 2.0
        )
    )
	//redline: 6400 * units.rpm

    wires wires()

    crankshaft c0(
        throw: 76 * units.mm / 2,
        flywheel_mass: 2.0 * units.lb,
        mass: 1.5 * units.lb,
        friction_torque: 8.0 * units.lb_ft,
        moment_of_inertia: 0.22986844776863666 * 0.5,
        position_x: 0.0,
        position_y: 0.0,
        tdc: constants.pi / 4
    )

    rod_journal rj0(angle: (0.0 / 6.0) * cycle)
    rod_journal rj1(angle: (1.0 / 6.0) * cycle)
    rod_journal rj2(angle: (2.0 / 6.0) * cycle)
    rod_journal rj3(angle: (3.0 / 6.0) * cycle)
    rod_journal rj4(angle: (4.0 / 6.0) * cycle)
    rod_journal rj5(angle: (5.0 / 6.0) * cycle)
    c0
        .add_rod_journal(rj0)
        .add_rod_journal(rj1)
        .add_rod_journal(rj2)
        .add_rod_journal(rj3)
        .add_rod_journal(rj4)
        .add_rod_journal(rj5)

    piston_parameters piston_params(
        mass: 200 * units.g,
        //blowby: k_28inH2O(0.1),
        compression_height: 1.0 * units.inch,
        wrist_pin_position: 0.0,
        displacement: 0.0
    )

    connecting_rod_parameters cr_params(
        mass: 150.0 * units.g,
        moment_of_inertia: 0.0015884918028487504,
        center_of_mass: 0.0,
        length: 4.5 * units.inch
    )

    cylinder_bank_parameters bank_params(
        bore: 70 * units.mm,
        deck_height: (4.5 + 1) * units.inch + 69 * units.mm / 2
    )

    intake intake(
        plenum_volume: 1.0 * units.L,
        plenum_cross_section_area: 10.0 * units.cm2,
        intake_flow_rate: k_carb(200.0),
        idle_flow_rate: k_carb(0.0),
        idle_throttle_plate_position: 0.9955,
        throttle_gamma: 1.0
    )

    exhaust_system_parameters es_params(
        outlet_flow_rate: k_carb(300.0),
        primary_tube_length: 1000.0 * units.inch,
        primary_flow_rate: k_carb(200.0),
        velocity_decay: 1.0,
        volume: 20.0 * units.L
    )

    exhaust_system exhaust0(
        es_params,
        audio_volume: 0.85,
        impulse_response: ir_lib.default_0
    )
    exhaust_system exhaust1(
        es_params,
        audio_volume: 0.7,
        impulse_response: ir_lib.default_0
    )

    cylinder_bank b0(bank_params, angle: 0 * units.deg)
    b0
        .add_cylinder(
            piston: piston(piston_params, blowby: k_28inH2O(0.1)),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: rj0,
            intake: intake,
            exhaust_system: exhaust0,
            ignition_wire: wires.wire1
        )
        .add_cylinder(
            piston: piston(piston_params, blowby: k_28inH2O(0.1)),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: rj1,
            intake: intake,
            exhaust_system: exhaust1,
            ignition_wire: wires.wire2
        )
        .add_cylinder(
            piston: piston(piston_params, blowby: k_28inH2O(0.1)),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: rj2,
            intake: intake,
            exhaust_system: exhaust0,
            ignition_wire: wires.wire3
        )
        .add_cylinder(
            piston: piston(piston_params, blowby: k_28inH2O(0.1)),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: rj3,
            intake: intake,
            exhaust_system: exhaust1,
            ignition_wire: wires.wire4
        )
        .add_cylinder(
            piston: piston(piston_params, blowby: k_28inH2O(0.1)),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: rj4,
            intake: intake,
            exhaust_system: exhaust0,
            ignition_wire: wires.wire5
        )
        .add_cylinder(
            piston: piston(piston_params, blowby: k_28inH2O(0.1)),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: rj5,
            intake: intake,
            exhaust_system: exhaust1,
            ignition_wire: wires.wire6
        )

    engine
        .add_cylinder_bank(b0)

    engine.add_crankshaft(c0)

    harmonic_cam_lobe lobe(
        duration_at_50_thou: 140 * units.deg,
        gamma: 1.0,
        lift: 400 * units.thou,
        steps: 100
    )

    i_camshaft_builder camshaft(
        lobe_profile: lobe,
        lobe_separation: 114 * units.deg,
        base_radius: 500 * units.thou
    )

    b0.set_cylinder_head (
        i_head(
            chamber_volume: 30 * units.cc,
            intake_camshaft: camshaft.intake_cam,
            exhaust_camshaft: camshaft.exhaust_cam
        )
    )

    function timing_curve(1000 * units.rpm)
    timing_curve
        .add_sample(0000 * units.rpm, 30 * units.deg)
        .add_sample(1000 * units.rpm, 30 * units.deg)
        .add_sample(2000 * units.rpm, 30 * units.deg)
        .add_sample(3000 * units.rpm, 30 * units.deg)
        .add_sample(4000 * units.rpm, 30 * units.deg)
		.add_sample(5000 * units.rpm, 35 * units.deg)
		.add_sample(6000 * units.rpm, 40 * units.deg)
		.add_sample(7000 * units.rpm, 45 * units.deg)
		.add_sample(8000 * units.rpm, 50 * units.deg)
		.add_sample(9000 * units.rpm, 50 * units.deg)

    engine.add_ignition_module(
        i_distributor(
            wires: wires,
            timing_curve: timing_curve,
            rev_limit: 19000 * units.rpm
        ))
}

public node k_transmission {
    alias output __out:
        transmission(
            max_clutch_torque: 4000000 * units.lb_ft
        )
        .add_gear(2.636)
        .add_gear(2.536)
        .add_gear(2.436)
        .add_gear(2.336)
        .add_gear(2.236)
        .add_gear(2.136)
        .add_gear(2.036)
        .add_gear(1.936)
        .add_gear(1.836)
        .add_gear(1.736)
        .add_gear(1.636)
        .add_gear(1.536)
        .add_gear(1.436)
        .add_gear(1.336)
        .add_gear(1.236)
        .add_gear(1.136)
        .add_gear(1.036)
        .add_gear(0.936)
        .add_gear(0.836)
        .add_gear(0.736)
        .add_gear(0.636)
        .add_gear(0.536)
        .add_gear(0.436)
        .add_gear(0.336)
        .add_gear(0.236);

}
