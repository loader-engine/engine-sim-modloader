import "engine_sim.mr"

units units()
constants constants()
impulse_response_library ir_lib()

private node wires {
    output wire1: ignition_wire();
    output wire2: ignition_wire();
}

label cycle(2 * 360 * units.deg)

private node kohler_V8_distributor {
    input wires;
    input timing_curve;
    input rev_limit: 6600 * units.rpm;
    input limiter_duration: 0.050 * units.sec;
    alias output __out:
        ignition_module(timing_curve: timing_curve, rev_limit: rev_limit, limiter_duration: limiter_duration)
            .connect_wire(wires.wire1, (0.0 / 8.0) * cycle)
            .connect_wire(wires.wire2, (3.0 / 8.0) * cycle);
}

private node kohler_V8_camshaft_builder {
    input lobe_profile;
    input intake_lobe_profile: lobe_profile;
    input exhaust_lobe_profile: lobe_profile;
    input lobe_separation: 114.0 * units.deg;
    input intake_lobe_center: lobe_separation;
    input exhaust_lobe_center: lobe_separation;
    input advance: 0.0 * units.deg;
    input base_radius: 0.75 * units.inch;

    output intake_cam_0: _intake_cam_0;
    output intake_cam_1: _intake_cam_1;
    output exhaust_cam_0: _exhaust_cam_0;
    output exhaust_cam_1: _exhaust_cam_1;

    camshaft_parameters params(
        advance: advance,
        base_radius: base_radius
    )

    camshaft _intake_cam_0(params, lobe_profile: intake_lobe_profile)
    camshaft _intake_cam_1(params, lobe_profile: intake_lobe_profile)
    camshaft _exhaust_cam_0(params, lobe_profile: exhaust_lobe_profile)
    camshaft _exhaust_cam_1(params, lobe_profile: exhaust_lobe_profile)

    label rot90(90 * units.deg)
    label rot360(360 * units.deg)

    _exhaust_cam_0
        .add_lobe(rot360 - exhaust_lobe_center)
        .add_lobe(rot360 - exhaust_lobe_center)
        .add_lobe(rot360 - exhaust_lobe_center)
        .add_lobe(rot360 - exhaust_lobe_center)
    _exhaust_cam_1
        .add_lobe(rot360 - exhaust_lobe_center + 3 * rot90)
        .add_lobe(rot360 - exhaust_lobe_center + 3 * rot90)
        .add_lobe(rot360 - exhaust_lobe_center + 3 * rot90)
        .add_lobe(rot360 - exhaust_lobe_center + 3 * rot90)
    _intake_cam_0
        .add_lobe(rot360 + intake_lobe_center)
        .add_lobe(rot360 + intake_lobe_center)
        .add_lobe(rot360 + intake_lobe_center)
        .add_lobe(rot360 + intake_lobe_center)
    _intake_cam_1
        .add_lobe(rot360 + intake_lobe_center + 3 * rot90)
        .add_lobe(rot360 + intake_lobe_center + 3 * rot90)
        .add_lobe(rot360 + intake_lobe_center + 3 * rot90)
        .add_lobe(rot360 + intake_lobe_center + 3 * rot90)
}


public node kohler_V8 {
    alias output __out: engine;

    engine engine(
        name: "Kohler V Eight",
        starter_torque: 400 * units.lb_ft,
        starter_speed: 1500 * units.rpm,
        redline: 6600 * units.rpm
    )

    wires wires()

    crankshaft c0(
        throw: 79 * units.mm / 2,
        flywheel_mass: 15 * units.lb,
        mass: 5 * units.lb,
        friction_torque: 10.0 * units.lb_ft,
        moment_of_inertia: 0.22986844776863666 * 0.5,
        position_x: 0.0,
        position_y: 0.0,
        tdc: constants.pi / 4
    )

    rod_journal rj0(angle: 0.0)
    rod_journal rj1(angle: 0.0)
    rod_journal rj2(angle: 0.0)
    rod_journal rj3(angle: 0.0)
    c0
        .add_rod_journal(rj0)
        .add_rod_journal(rj1)
        .add_rod_journal(rj2)
        .add_rod_journal(rj3)

    piston_parameters piston_params(
        mass: 330 * units.g,
        //blowby: k_28inH2O(0.1),
        compression_height: 1.0 * units.inch,
        wrist_pin_position: 0.0,
        displacement: 0.0
    )

    connecting_rod_parameters cr_params(
        mass: 240.0 * units.g,
        moment_of_inertia: 0.0015884918028487504,
        center_of_mass: 0.0,
        length: 4.0 * units.inch
    )

    cylinder_bank_parameters bank_params(
        bore: 83 * units.mm,
        deck_height: (4.0 + 1) * units.inch + 69 * units.mm / 2
    )

    intake intake(
        plenum_volume: 1.0 * units.L,
        plenum_cross_section_area: 10.0 * units.cm2,
        intake_flow_rate: k_carb(250.0),
        idle_flow_rate: k_carb(0.0),
        idle_throttle_plate_position: 0.975,
        throttle_gamma: 1.0
    )

    exhaust_system_parameters es_params(
        outlet_flow_rate: k_carb(400.0),
        primary_tube_length: 10.0 * units.inch,
        primary_flow_rate: k_carb(200.0),
        velocity_decay: 1.0,
        volume: 20.0 * units.L
    )

    exhaust_system exhaust0(
        es_params,
        audio_volume: 1.0,
        impulse_response: ir_lib.default_0
    )

    cylinder_bank b0(bank_params, angle: -45 * units.deg)
    b0
        .add_cylinder(
            piston: piston(piston_params, blowby: k_28inH2O(0.1)),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: rj0,
            intake: intake,
            exhaust_system: exhaust0,
            ignition_wire: wires.wire1
        )
        .add_cylinder(
            piston: piston(piston_params, blowby: k_28inH2O(0.1)),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: rj1,
            intake: intake,
            exhaust_system: exhaust0,
            ignition_wire: wires.wire1
        )
        .add_cylinder(
            piston: piston(piston_params, blowby: k_28inH2O(0.1)),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: rj2,
            intake: intake,
            exhaust_system: exhaust0,
            ignition_wire: wires.wire1
        )
        .add_cylinder(
            piston: piston(piston_params, blowby: k_28inH2O(0.1)),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: rj3,
            intake: intake,
            exhaust_system: exhaust0,
            ignition_wire: wires.wire1
        )

    cylinder_bank b1(bank_params, angle: 45.0 * units.deg)
    b1
        .add_cylinder(
            piston: piston(piston_params, blowby: k_28inH2O(0.1)),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: rj0,
            intake: intake,
            exhaust_system: exhaust0,
            ignition_wire: wires.wire2
        )
        .add_cylinder(
            piston: piston(piston_params, blowby: k_28inH2O(0.1)),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: rj1,
            intake: intake,
            exhaust_system: exhaust0,
            ignition_wire: wires.wire2
        )
        .add_cylinder(
            piston: piston(piston_params, blowby: k_28inH2O(0.1)),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: rj2,
            intake: intake,
            exhaust_system: exhaust0,
            ignition_wire: wires.wire2
        )
        .add_cylinder(
            piston: piston(piston_params, blowby: k_28inH2O(0.1)),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: rj3,
            intake: intake,
            exhaust_system: exhaust0,
            ignition_wire: wires.wire2
        )

    engine
        .add_cylinder_bank(b0)
        .add_cylinder_bank(b1)

    engine.add_crankshaft(c0)

    harmonic_cam_lobe lobe(
        duration_at_50_thou: 180 * units.deg,
        gamma: 1.1,
        lift: 450 * units.thou,
        steps: 100
    )

    kohler_V8_camshaft_builder camshaft(
        lobe_profile: lobe,
        lobe_separation: 114 * units.deg,
        base_radius: 500 * units.thou
    )

    b0.set_cylinder_head (
        generic_small_engine_head(
            chamber_volume: 50 * units.cc,
            intake_camshaft: camshaft.intake_cam_0,
            exhaust_camshaft: camshaft.exhaust_cam_0
        )
    )
    b1.set_cylinder_head (
        generic_small_engine_head(
            chamber_volume: 50 * units.cc,
            intake_camshaft: camshaft.intake_cam_1,
            exhaust_camshaft: camshaft.exhaust_cam_1,
            flip_display: true
        )
    )

    function timing_curve(1000 * units.rpm)
    timing_curve
        .add_sample(0000 * units.rpm, 50 * units.deg)
        .add_sample(1000 * units.rpm, 50 * units.deg)
        .add_sample(2000 * units.rpm, 50 * units.deg)
        .add_sample(3000 * units.rpm, 50 * units.deg)
        .add_sample(4000 * units.rpm, 50 * units.deg)

    engine.add_ignition_module(
        kohler_V8_distributor(
            wires: wires,
            timing_curve: timing_curve,
            rev_limit: 7000 * units.rpm,
            limiter_duration: 0.050 * units.sec
        ))
}
