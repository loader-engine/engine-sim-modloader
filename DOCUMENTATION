  _                 _                                  _            
 | |               | |                                (_)           
 | | ___   __ _  __| | ___ _ __ ______ ___ _ __   __ _ _ _ __   ___ 
 | |/ _ \ / _` |/ _` |/ _ \ '__|______/ _ \ '_ \ / _` | | '_ \ / _ \
 | | (_) | (_| | (_| |  __/ |        |  __/ | | | (_| | | | | |  __/
 |_|\___/ \__,_|\__,_|\___|_|         \___|_| |_|\__, |_|_| |_|\___|
                                                  __/ |             
                                                 |___/              

                        A mod loader for 
        The engine-sim project by ange-yaghi aka. AngeTheGreat

                      Modloader by DDev247

        LUA DOCUMENTATION:

            NOTES:
                
                Wow, such empty

            EVENTS:

                process():
                    - runs on 60FPS
                
                start():
                    - runs on start (not useful)

            SIMULATOR FUNCTIONS:

                addProcessHandler(function)
                    - Adds a handler for the process() function.

                addStartHandler(function)
                    - Adds a handler for the start() function.

                trace(message)
                    - Logs the message in debug console in VS and the console window.

                es.info(message)
                    - Logs the message in the info status

                es.setModel(part, modelName)
                    - Sets model of part to modelName

                es.setTexture(part, textureName)
                    - Sets texture(material) of part to textureName

                es.loadTexture(textureName)
                    - Loads the texture from assets/textures/textureName.png and makes a material
                      Will throw an error if you try to load a texture two times

                es.synthAdd(value)
                    - Adds something to the synthetiser

            ENGINE FUNCTIONS:
                
                es.engine.setAntilag(on, often)
                    - Sets the antilag setting.
                      often - if the system fires often

                es.engine.setMixture(state)
                    - Sets the mixture
                      true: rich
                      false: normal

                es.engine.SetThrottle(value)
                    - Sets the throttle to a certain value

                es.engine.SetManifoldPressure(value)
                    - Sets the manifold pressure to a certain value

                es.engine.SetIntakeFlow(value)
                    - Sets the intake flow to a certain value

                es.engine.setIgnition(state, minRPM)
                    - Sets the EFI Ignition simulation values

                es.engine.setInjection(state, minRPM)
                    - Sets the EFI Injection simulation values

                es.engine.setCrankWeight(value)
                    - Sets the crankshaft weight to value (kilograms)

                es.engine.setFlywheelWeight(value)
                    - Sets the flywheel weight to value (kilograms)

                es.engine.setPistonWeight(value)
                    - Sets the crankshaft weight to value (grams)

                es.engine.setConrodWeight(value)
                    - Sets the conrod weight to value (grams)

            LOADER FUNCTIONS:

                es.loader.setGlobalInput(value)
                    - Sets the global input to true or false

                es.loader.import(filename)
                    - Loads a file

                es.loader.initDNet()
                    - Inits DNet

                es.loader.sendDNet(message)
                    - Sends a message using DNet

                es.loader.json.new()
                    - Clears the JSON

                es.loader.json.addString(key, str)
                    - Adds a string to the JSON
                
                es.loader.json.addInt(key, integer)
                    - Adds a integer to the JSON
                
                es.loader.json.addNumber(key, number)
                    - Adds a number to the JSON

                es.loader.json.getString()
                    - Gets the string of the JSON

            VARIABLES:
                
                (GET) means you can only get the value. Setting the value won't do anything.
                (GET, SET) means you can get and set the value.

                (GET, SET) variables need to be set using 'Set(VARIABLE_NAME)'
                
                INPUT_Q, INPUT_W ... INPUT_N, INPUT_M (GET)
                    - Input values in format:
                      "true" or "false" (string)

                es.loader.Loader_Version (GET)
                    - Gets the loader version.
                
                es.loader.Loader_Sim_Version (GET)
                    - Gets the simulator version.


                es.engine.Name (GET)
                    - Gets the engine name.

                es.engine.RPM (GET)
                    - Gets the current engine RPM.

                es.engine.Speed (GET)
                    - Gets the vehicle speed

                es.engine.Redline (GET)
                    - Gets the engine redline

                es.engine.Gear (GET)
                    - Gets the current gear

                es.engine.AFR (GET)
                    - Gets the current engine A/F ratio.

                es.engine.Throttle (GET, SET)
                    - Gets or sets the engine throttle.
                      NOTE: throttle 1 means the throttle is closed and 0 means opened.

                es.engine.ManifoldPressure (GET, SET)
                    - Gets or sets the current manifold pressure (in atmospheres).
                      NOTE: set pressure is ADDED to the current pressure.

                es.engine.ExhaustFlow (GET)
                    - Gets the average exhaust flow.

                es.engine.IntakeFlow (GET, SET)
                    - Gets or sets the intake flow.

                es.engine.dyno.Torque (GET)
                    - Gets the dyno torque

                es.engine.dyno.Power (GET)
                    - Gets the dyno power

                Simulator_FPS (GET)
                    - Gets the current simulator FPS.

